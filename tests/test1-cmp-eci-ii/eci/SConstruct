#=====================================================
#=====================================================
#=====================================================
#   energy conserving composite staggered grid scheme
from rsf.proj import*
import math
import os
import platform
import sys

if platform.system()=='Darwin':
    #   main at local
    main = os.path.abspath('/Users/muhongzhou/Desktop/PhD_codes/ecsg/main')
    sys.path.append('/Users/muhongzhou/Desktop/PhD_codes/ecsg/tests/test1-cmp-eci-ii/')
elif platform.system()=='Linux':
    #   main at tacc
    main = os.path.abspath('/work/02049/mz10/ecsg/main')
    sys.path.append('/work/02049/mz10/ecsg/tests/test1-cmp-eci-ii/')
else:
    os._exit(1)

#   import testing pars
from pareci import *


#=====================================================
#   Set up source (ricker wavelet) main frequency [Hz]
fpeak = 15.


#=====================================================
#   Set up material parameters
#   unit: rho[g/m^3], cs/cp[m/ms], lx/ly/lz[m]
layer1 = {'rho':2.5, 'cs':1., 'cp':2., 'lx':lx, 'ly':ly, 'lz':lz1}
layer2 = {'rho':2.65, 'cs':2., 'cp':4., 'lx':layer1['lx'], 'ly':layer1['ly'], 'lz':lz2}
layers=[layer1, layer2]
for i in range(len(layers)):
    layers[i]['buoy'] = 1/layers[i]['rho']
    layers[i]['s11'] = layers[i]['rho']*layers[i]['cp']**2
    layers[i]['s13'] = layers[i]['s11']-2*layers[i]['rho']*layers[i]['cs']**2


#=====================================================
#   Set up grid: (ix,iy,iz) in [0, nx]*[0, ny]*[0, nz], ix is the fastest dim
#n_samples_per_wavelength=15
dx1 = layer1['cs']*1000/fpeak/n_samples_per_wavelength
grid1 = {'dx':dx1, 'dy':dx1, 'dz':dx1}
grid2 = {'dx':dx1*2, 'dy':dx1*2, 'dz':dx1*2}

#   Make sure grid1['nx']=2*grids2['nx'] to make sure the grid interface is aligned
grid2['nx']=int(layer2['lx']/grid2['dx'])
grid2['ny']=int(layer2['ly']/grid2['dy'])
grid1['nx']=2*grid2['nx']
grid1['ny']=2*grid2['ny']

grid1['nz']=int(layer1['lz']/grid1['dz']/2)*2
grid2['nz']=int(layer2['lz']/grid2['dz'])

grids=[grid1, grid2]
print(grids)


#=====================================================
#   create buoyancy, stiffness file
#   [buoy_0, buoy_1, ...]
#   [s11_0, s11_1, ...]
#   [s13_0, s13_1, ...]
#   suppose only n_extra fine grid points is in layer2
#n_extra=1
par_name = ['buoy', 's11', 's13']
for i in range(len(par_name)):
    Flow('%s_0_0'%(par_name[i]), None, ''' spike
        n1=%d n2=%d n3=%d
        d1=%f d2=%f d3=%f
        label1="Distance(X)" unit1="m"
        label2="Distance(Y)" unit2="m"
        label3="Distance(Z)" unit3="m"
        mag=%f
        '''%(grid1['nx']+1,grid1['ny']+1,grid1['nz']+1-n_extra,
             grid1['dx'], grid1['dy'], grid1['dz'],
             layer1[par_name[i]]))
    Flow('%s_0_1'%(par_name[i]), None, ''' spike
        n1=%d n2=%d n3=%d
        d1=%f d2=%f d3=%f
        label1="Distance(X)" unit1="m"
        label2="Distance(Y)" unit2="m"
        label3="Distance(Z)" unit3="m"
        mag=%f
        '''%(grid1['nx']+1,grid1['ny']+1,n_extra,
             grid1['dx'], grid1['dy'], grid1['dz'],
             layer2[par_name[i]]))
    Flow('%s_0'%(par_name[i]),['%s_0_0'%(par_name[i]), '%s_0_1'%(par_name[i])],'''cat ${SOURCES[1:-1]} axis=3''')
    Flow('dummy_%s'%(par_name[i]),['%s_0_0'%(par_name[i]), '%s_0_1'%(par_name[i])],'''rm ${SOURCES[0:-1]}''',stdout=0,stdin=0)
    Flow('%s_1'%(par_name[i]), None, ''' spike
        n1=%d n2=%d n3=%d
        d1=%f d2=%f d3=%f
        label1="Distance(X)" unit1="m"
        label2="Distance(Y)" unit2="m"
        label3="Distance(Z)" unit3="m"
        mag=%f
        '''%(grid2['nx']+1,grid2['ny']+1,grid2['nz']+1,
             grid2['dx'], grid2['dy'], grid2['dz'],
             layer2[par_name[i]]))


#=====================================================
#   Set up simulation time step: dt
#cfl = 0.95
max_vel = layer1['cp']
for i in range(len(layers)):
    if max_vel < layers[i]['cp']:
        max_vel = layers[i]['cp']
dt = min(grid1['dx'],grid1['dy'],grid1['dz'])/max_vel/math.sqrt(3)*cfl #[ms]
print(dt)

#=====================================================
#   Set up source profile
pi = math.atan(1)*4.
ricker_tmp = (pi**2)*(fpeak**2)

if src_option==0: #source is kept away from the grid interface
    src_z = int(layer1['lz']*0.2/grid2['dz'])*grid2['dz']
elif src_option==1: #source is very close to the grid interface
    src_z = (grid1['nz']-1)*grid1['dz']

ricker_pars = {
    'src_x':int(layer1['lx']*0.5/grid2['dx'])*grid2['dx'],
    'src_y':int(layer1['ly']*0.5/grid2['dy'])*grid2['dy'],
    'src_z':src_z,
    'src_nt':700,
    'src_dt':dt/1000., #because src_dt is of unit [s]
    'tmp':ricker_tmp,
    'delrt':1/fpeak,
}
print(ricker_pars)

ricker_pars['equation']="(1-2*(%(tmp)f)*(x1-%(delrt)f)*(x1-%(delrt)f))*exp(-(%(tmp)f)*(x1-%(delrt)f)*(x1-%(delrt)f))"%ricker_pars
Flow('ricker',None,'''math
    n1=%(src_nt)d o1=0 d1=%(src_dt)f output=\"%(equation)s\"
    n2=1 o2=%(src_x)f
    n3=1 o3=%(src_y)f
    n4=1 o4=%(src_z)f |
    put label1="Time" unit1="s"
    label2="Distance(X)" unit2="m"
    label3="Distance(Y)" unit3="m"
    label4="Distance(Z)" unit4="m"
    '''%ricker_pars)
Result('ricker','''graph title="Ricker Source" ''')

#=====================================================
#   Set up rec_trace profile
#   rec_trace.asci (n1: x,y,z displacement, n2: number of receivers)
#rec_trace_pars = {
#    'rec1_x':int(layer1['lx']/2/grid2['dx'])*grid2['dx'],
#    'rec2_x':int(layer1['lx']*0.7/grid2['dx'])*grid2['dx'],
#    'rec1_y':int(layer1['ly']/2/grid2['dy'])*grid2['dy'],
#    'rec1_z':int(layer1['lz']*0.8/grid2['dz'])*grid2['dz']-10*grid2['dz'],
#    'rec2_z':int(layer1['lz']*0.8/grid2['dz'])*grid2['dz']+10*grid2['dz'],
#    'rec3_z':int(layer1['lz']/grid1['dz']/2)*2*grid1['dz']+10*grid2['dz']
#}
rec_trace_pars = {
    'rec1_x':int(layer1['lx']*0.55/grid2['dx'])*grid2['dx'],
    'rec2_x':int(layer1['lx']*0.6/grid2['dx'])*grid2['dx'],
    'rec3_x':int(layer1['lx']*0.65/grid2['dx'])*grid2['dx'],
    'rec4_x':int(layer1['lx']*0.7/grid2['dx'])*grid2['dx'],
    'rec_y':ricker_pars['src_y'],
    'rec_z':int(layer1['lz']*0.2/grid2['dz'])*grid2['dz'],
}
Flow('rec_trace.asci', None, '''echo
    '%(rec1_x)f %(rec_y)f %(rec_z)f
    %(rec2_x)f %(rec_y)f %(rec_z)f
    %(rec3_x)f %(rec_y)f %(rec_z)f
    %(rec4_x)f %(rec_y)f %(rec_z)f'
    '''%rec_trace_pars)
Flow('rec_trace.hh','rec_trace.asci','''echo in=${SOURCES[0]} n1=3 n2=4 data_format=ascii_float | dd form=native --out=stdout''')

#=====================================================
#=====================================================
#   Main Program
movie_dt = 30*dt
movie_nt = int(duration/(30*dt))

Flow(['out.txt', 'energy_eci_%s'%(test_name), 'res_trace', 'rec_out', 'movie_vx_1', 'movie_vx_2'],
     ['ricker', 'rec_trace.hh', 'buoy_0', 'buoy_1', 's11_0', 's11_1', 's13_0', 's13_1'],
     main + ''' num_threads=16
         num_grids=2 top_bc=1
         buoy_1=${SOURCES[2]} s11_1=${SOURCES[4]} s13_1=${SOURCES[6]}
         buoy_2=${SOURCES[3]} s11_2=${SOURCES[5]} s13_2=${SOURCES[7]}
         dt=%f radius=1 src=${SOURCES[0]}
         check_energy=y energy_trace=${TARGETS[1]}
         movie_dt=%f movie_nt=%d
         movie_vx_flag=y movie_vx_1=${TARGETS[4]} movie_vx_2=${TARGETS[5]}
         rec_in=${SOURCES[1]} rec_out=${TARGETS[3]}
         verb=y res_trace=${TARGETS[2]}
         '''%(dt,movie_dt,movie_nt), stdin=0)

Result('energy_eci_%s'%(test_name),'''sfgraph scalebar=y title="Energy: e(t)" ''')
Flow('rec_out.hh','rec_out','sfcp --out=stdout')
#=====================================================
#   create movie
Result('movie_vx_1',
       '''
           transp plane=13 | transp plane=23 | byte gainpanel=all |
           grey4 frame1=%d frame2=%d frame3=%d clip=0.01
           title="vx (fine grid)"  flat=n
           '''%(grid1['nz']/2,grid1['nx']/2,grid1['ny']/2))
Result('movie_vx_2',
       '''
           transp plane=13 | transp plane=23 | byte gainpanel=all |
           grey4 frame1=%d frame2=%d frame3=%d clip=0.01
           title="vx (fine grid)"  flat=n
           '''%(grid2['nz']/2,grid2['nx']/2,grid2['ny']/2))
#   create movie on the composite grid
Flow('tmp1', 'movie_vx_1', '''
    window j1=2 j2=2 j3=2
    ''')
Flow('tmp2', 'movie_vx_2', '''
    window f3=1
    ''')
Flow('movie_cg', ['tmp1', 'tmp2'], '''
    cat ${SOURCES[1:-1]} axis=3
    ''')
#clean up tmp files
Flow('dummy-cg',['tmp1', 'tmp2'],'''rm ${SOURCES[0:-1]}''',stdout=0,stdin=0)
Result('movie_cg',
       ''' transp plane=13 | transp plane=23 | byte gainpanel=all |
           grey4 frame1=%d frame2=%d frame3=%d clip=0.01
           title="vx (composite grid)"  flat=n
           '''%(grid1['nz']/2-2,grid2['nx']/2,grid2['ny']/2))

#=====================================================
# create report pics
for iframe in [10,16,22,28,34,36]:
    title = "vx, time = %f ms"%((iframe-1)*movie_dt)
    Result('movie_cg_eci_%d_%s'%(iframe,test_name),'movie_cg',
           '''window f4=%d n4=1 | transp plane=13 | transp plane=23 | byte gainpanel=all |
               grey3 frame1=%d frame2=%d frame3=%d clip=0.01
               title="%s"  flat=y
               '''%(iframe,grid1['nz']/2-2,grid2['nx']/2,grid2['ny']/2,title))

End()
